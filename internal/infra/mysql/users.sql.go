// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    email,
    avatar,
    username,
    password,
    points,
    missions,
    created_at,
    updated_at
  )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID        string
	Email     string
	Avatar    sql.NullString
	Username  string
	Password  string
	Points    int32
	Missions  json.RawMessage
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Avatar,
		arg.Username,
		arg.Password,
		arg.Points,
		arg.Missions,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, avatar, username, password, points, missions, created_at, updated_at
FROM users
WHERE email = ?
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Avatar,
		&i.Username,
		&i.Password,
		&i.Points,
		&i.Missions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, email, avatar, username, password, points, missions, created_at, updated_at
FROM users
WHERE id = ?
`

func (q *Queries) FindUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Avatar,
		&i.Username,
		&i.Password,
		&i.Points,
		&i.Missions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email, avatar, username, password, points, missions, created_at, updated_at
FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Avatar,
			&i.Username,
			&i.Password,
			&i.Points,
			&i.Missions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users
SET email = ?,
  avatar = ?,
  username = ?,
  password = ?,
  points = ?,
  missions = ?,
  updated_at = ?
WHERE id = ?
`

type UpdateUserByIdParams struct {
	Email     string
	Avatar    sql.NullString
	Username  string
	Password  string
	Points    int32
	Missions  json.RawMessage
	UpdatedAt sql.NullTime
	ID        string
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.Email,
		arg.Avatar,
		arg.Username,
		arg.Password,
		arg.Points,
		arg.Missions,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateUserPointsByUserId = `-- name: UpdateUserPointsByUserId :exec
UPDATE users
SET points = ?
WHERE id = ?
`

type UpdateUserPointsByUserIdParams struct {
	Points int32
	ID     string
}

func (q *Queries) UpdateUserPointsByUserId(ctx context.Context, arg UpdateUserPointsByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPointsByUserId, arg.Points, arg.ID)
	return err
}
