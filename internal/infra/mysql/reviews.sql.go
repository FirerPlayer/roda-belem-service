// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: reviews.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addAccessibilityFeatureByReviewID = `-- name: AddAccessibilityFeatureByReviewID :exec
UPDATE reviews
SET accessibility_features = CONCAT(accessibility_features, ',', ?)
WHERE id = ?
`

type AddAccessibilityFeatureByReviewIDParams struct {
	CONCAT interface{}
	ID     string
}

func (q *Queries) AddAccessibilityFeatureByReviewID(ctx context.Context, arg AddAccessibilityFeatureByReviewIDParams) error {
	_, err := q.db.ExecContext(ctx, addAccessibilityFeatureByReviewID, arg.CONCAT, arg.ID)
	return err
}

const createReview = `-- name: CreateReview :exec
INSERT INTO reviews (
    id,
    place_id,
    user_id,
    content,
    images,
    rating,
    reactions,
    accessibility_features,
    created_at,
    updated_at
  )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateReviewParams struct {
	ID                    string
	PlaceID               sql.NullString
	UserID                sql.NullString
	Content               sql.NullString
	Images                json.RawMessage
	Rating                sql.NullFloat64
	Reactions             json.RawMessage
	AccessibilityFeatures sql.NullString
	CreatedAt             sql.NullTime
	UpdatedAt             sql.NullTime
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) error {
	_, err := q.db.ExecContext(ctx, createReview,
		arg.ID,
		arg.PlaceID,
		arg.UserID,
		arg.Content,
		arg.Images,
		arg.Rating,
		arg.Reactions,
		arg.AccessibilityFeatures,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteReviewById = `-- name: DeleteReviewById :exec
DELETE FROM reviews
WHERE id = ?
`

func (q *Queries) DeleteReviewById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteReviewById, id)
	return err
}

const findReviewById = `-- name: FindReviewById :one
SELECT id, place_id, user_id, content, images, rating, reactions, accessibility_features, created_at, updated_at
FROM reviews
WHERE id = ?
`

func (q *Queries) FindReviewById(ctx context.Context, id string) (Review, error) {
	row := q.db.QueryRowContext(ctx, findReviewById, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.UserID,
		&i.Content,
		&i.Images,
		&i.Rating,
		&i.Reactions,
		&i.AccessibilityFeatures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findReviewsByPlaceId = `-- name: FindReviewsByPlaceId :many
SELECT id, place_id, user_id, content, images, rating, reactions, accessibility_features, created_at, updated_at
FROM reviews
WHERE place_id = ?
LIMIT ?
OFFSET ?
`

type FindReviewsByPlaceIdParams struct {
	PlaceID sql.NullString
	Limit   int32
	Offset  int32
}

func (q *Queries) FindReviewsByPlaceId(ctx context.Context, arg FindReviewsByPlaceIdParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, findReviewsByPlaceId, arg.PlaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.UserID,
			&i.Content,
			&i.Images,
			&i.Rating,
			&i.Reactions,
			&i.AccessibilityFeatures,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findReviewsByUserID = `-- name: FindReviewsByUserID :many
SELECT id, place_id, user_id, content, images, rating, reactions, accessibility_features, created_at, updated_at
FROM reviews
WHERE user_id = ?
LIMIT ?
OFFSET ?
`

type FindReviewsByUserIDParams struct {
	UserID sql.NullString
	Limit  int32
	Offset int32
}

func (q *Queries) FindReviewsByUserID(ctx context.Context, arg FindReviewsByUserIDParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, findReviewsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.UserID,
			&i.Content,
			&i.Images,
			&i.Rating,
			&i.Reactions,
			&i.AccessibilityFeatures,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReviewById = `-- name: UpdateReviewById :exec
UPDATE reviews
SET content = ?,
  images = ?,
  rating = ?,
  reactions = ?,
  accessibility_features = ?,
  updated_at = ?
WHERE id = ?
`

type UpdateReviewByIdParams struct {
	Content               sql.NullString
	Images                json.RawMessage
	Rating                sql.NullFloat64
	Reactions             json.RawMessage
	AccessibilityFeatures sql.NullString
	UpdatedAt             sql.NullTime
	ID                    string
}

func (q *Queries) UpdateReviewById(ctx context.Context, arg UpdateReviewByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateReviewById,
		arg.Content,
		arg.Images,
		arg.Rating,
		arg.Reactions,
		arg.AccessibilityFeatures,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
