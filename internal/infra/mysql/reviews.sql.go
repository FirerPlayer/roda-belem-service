// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: reviews.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createReview = `-- name: CreateReview :exec
INSERT INTO reviews (
    id,
    place_id,
    user_id,
    text,
    images,
    rating,
    reactions,
    created_at,
    updated_at
  )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateReviewParams struct {
	ID        string
	PlaceID   sql.NullString
	UserID    sql.NullString
	Text      sql.NullString
	Images    json.RawMessage
	Rating    sql.NullFloat64
	Reactions json.RawMessage
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) error {
	_, err := q.db.ExecContext(ctx, createReview,
		arg.ID,
		arg.PlaceID,
		arg.UserID,
		arg.Text,
		arg.Images,
		arg.Rating,
		arg.Reactions,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const findReviewById = `-- name: FindReviewById :one
SELECT id, place_id, user_id, text, images, rating, reactions, created_at, updated_at
FROM reviews
WHERE id = ?
`

func (q *Queries) FindReviewById(ctx context.Context, id string) (Review, error) {
	row := q.db.QueryRowContext(ctx, findReviewById, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.UserID,
		&i.Text,
		&i.Images,
		&i.Rating,
		&i.Reactions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findReviewsByPlaceId = `-- name: FindReviewsByPlaceId :many
SELECT id, place_id, user_id, text, images, rating, reactions, created_at, updated_at
FROM reviews
WHERE place_id = ?
`

func (q *Queries) FindReviewsByPlaceId(ctx context.Context, placeID sql.NullString) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, findReviewsByPlaceId, placeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.UserID,
			&i.Text,
			&i.Images,
			&i.Rating,
			&i.Reactions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findReviewsByUserId = `-- name: FindReviewsByUserId :many
SELECT id, place_id, user_id, text, images, rating, reactions, created_at, updated_at
FROM reviews
WHERE user_id = ?
`

func (q *Queries) FindReviewsByUserId(ctx context.Context, userID sql.NullString) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, findReviewsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.UserID,
			&i.Text,
			&i.Images,
			&i.Rating,
			&i.Reactions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
