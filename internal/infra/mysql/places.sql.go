// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: places.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createPlace = `-- name: CreatePlace :exec
INSERT INTO places (
    id,
    place_id,
    name,
    formatted_address,
    lat,
    lng,
    icon,
    types,
    opening_periods,
    photos,
    rating,
    accessibility_features
  )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreatePlaceParams struct {
	ID                    string
	PlaceID               sql.NullString
	Name                  sql.NullString
	FormattedAddress      sql.NullString
	Lat                   sql.NullFloat64
	Lng                   sql.NullFloat64
	Icon                  sql.NullString
	Types                 json.RawMessage
	OpeningPeriods        json.RawMessage
	Photos                json.RawMessage
	Rating                sql.NullFloat64
	AccessibilityFeatures json.RawMessage
}

func (q *Queries) CreatePlace(ctx context.Context, arg CreatePlaceParams) error {
	_, err := q.db.ExecContext(ctx, createPlace,
		arg.ID,
		arg.PlaceID,
		arg.Name,
		arg.FormattedAddress,
		arg.Lat,
		arg.Lng,
		arg.Icon,
		arg.Types,
		arg.OpeningPeriods,
		arg.Photos,
		arg.Rating,
		arg.AccessibilityFeatures,
	)
	return err
}

const deletePlaceById = `-- name: DeletePlaceById :exec
DELETE FROM places
WHERE id = $1
`

func (q *Queries) DeletePlaceById(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deletePlaceById)
	return err
}

const findPlaceById = `-- name: FindPlaceById :one
SELECT id, place_id, name, formatted_address, lat, lng, icon, types, opening_periods, photos, rating, accessibility_features
FROM places
WHERE id = ?
`

func (q *Queries) FindPlaceById(ctx context.Context, id string) (Place, error) {
	row := q.db.QueryRowContext(ctx, findPlaceById, id)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.Name,
		&i.FormattedAddress,
		&i.Lat,
		&i.Lng,
		&i.Icon,
		&i.Types,
		&i.OpeningPeriods,
		&i.Photos,
		&i.Rating,
		&i.AccessibilityFeatures,
	)
	return i, err
}

const findPlaceByPlaceId = `-- name: FindPlaceByPlaceId :one
SELECT id, place_id, name, formatted_address, lat, lng, icon, types, opening_periods, photos, rating, accessibility_features
FROM places
WHERE place_id = ?
`

func (q *Queries) FindPlaceByPlaceId(ctx context.Context, placeID sql.NullString) (Place, error) {
	row := q.db.QueryRowContext(ctx, findPlaceByPlaceId, placeID)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.Name,
		&i.FormattedAddress,
		&i.Lat,
		&i.Lng,
		&i.Icon,
		&i.Types,
		&i.OpeningPeriods,
		&i.Photos,
		&i.Rating,
		&i.AccessibilityFeatures,
	)
	return i, err
}

const findPlacesByAccessibilityFeatures = `-- name: FindPlacesByAccessibilityFeatures :many
SELECT id, place_id, name, formatted_address, lat, lng, icon, types, opening_periods, photos, rating, accessibility_features
FROM places
WHERE accessibility_features = ?
`

func (q *Queries) FindPlacesByAccessibilityFeatures(ctx context.Context, accessibilityFeatures json.RawMessage) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, findPlacesByAccessibilityFeatures, accessibilityFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.Name,
			&i.FormattedAddress,
			&i.Lat,
			&i.Lng,
			&i.Icon,
			&i.Types,
			&i.OpeningPeriods,
			&i.Photos,
			&i.Rating,
			&i.AccessibilityFeatures,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPlacesNearby = `-- name: FindPlacesNearby :many
SELECT id, place_id, name, formatted_address, lat, lng, icon, types, opening_periods, photos, rating, accessibility_features
FROM places -- distance in meters
WHERE ST_DISTANCE_SPHERE(POINT(lat, lng), POINT(?, ?)) <= ?
`

type FindPlacesNearbyParams struct {
	POINT   float64
	POINT_2 float64
	Lat     sql.NullFloat64
}

func (q *Queries) FindPlacesNearby(ctx context.Context, arg FindPlacesNearbyParams) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, findPlacesNearby, arg.POINT, arg.POINT_2, arg.Lat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.Name,
			&i.FormattedAddress,
			&i.Lat,
			&i.Lng,
			&i.Icon,
			&i.Types,
			&i.OpeningPeriods,
			&i.Photos,
			&i.Rating,
			&i.AccessibilityFeatures,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaceById = `-- name: UpdatePlaceById :exec
UPDATE places
SET place_id = ?,
  name = ?,
  formatted_address = ?,
  lat = ?,
  lng = ?,
  icon = ?,
  types = ?,
  opening_periods = ?,
  photos = ?,
  rating = ?,
  accessibility_features = ?
WHERE id = ?
`

type UpdatePlaceByIdParams struct {
	PlaceID               sql.NullString
	Name                  sql.NullString
	FormattedAddress      sql.NullString
	Lat                   sql.NullFloat64
	Lng                   sql.NullFloat64
	Icon                  sql.NullString
	Types                 json.RawMessage
	OpeningPeriods        json.RawMessage
	Photos                json.RawMessage
	Rating                sql.NullFloat64
	AccessibilityFeatures json.RawMessage
	ID                    string
}

func (q *Queries) UpdatePlaceById(ctx context.Context, arg UpdatePlaceByIdParams) error {
	_, err := q.db.ExecContext(ctx, updatePlaceById,
		arg.PlaceID,
		arg.Name,
		arg.FormattedAddress,
		arg.Lat,
		arg.Lng,
		arg.Icon,
		arg.Types,
		arg.OpeningPeriods,
		arg.Photos,
		arg.Rating,
		arg.AccessibilityFeatures,
		arg.ID,
	)
	return err
}
