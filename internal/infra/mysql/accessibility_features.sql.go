// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: accessibility_features.sql

package db

import (
	"context"
	"database/sql"
)

const deleteAccessibilityFeature = `-- name: DeleteAccessibilityFeature :exec
DELETE FROM accessibility_features
WHERE review_id = ?
  AND feature = ?
`

type DeleteAccessibilityFeatureParams struct {
	ReviewID sql.NullString
	Feature  sql.NullString
}

func (q *Queries) DeleteAccessibilityFeature(ctx context.Context, arg DeleteAccessibilityFeatureParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccessibilityFeature, arg.ReviewID, arg.Feature)
	return err
}

const findAccessibilityFeaturesByReviewId = `-- name: FindAccessibilityFeaturesByReviewId :many
SELECT feature
FROM accessibility_features
WHERE review_id = ?
`

func (q *Queries) FindAccessibilityFeaturesByReviewId(ctx context.Context, reviewID sql.NullString) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, findAccessibilityFeaturesByReviewId, reviewID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var feature sql.NullString
		if err := rows.Scan(&feature); err != nil {
			return nil, err
		}
		items = append(items, feature)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccessibilityFeatureByReviewIdAndFeature = `-- name: UpdateAccessibilityFeatureByReviewIdAndFeature :exec
UPDATE accessibility_features
SET feature = ?
WHERE review_id = ?
  AND feature = ?
`

type UpdateAccessibilityFeatureByReviewIdAndFeatureParams struct {
	Feature   sql.NullString
	ReviewID  sql.NullString
	Feature_2 sql.NullString
}

func (q *Queries) UpdateAccessibilityFeatureByReviewIdAndFeature(ctx context.Context, arg UpdateAccessibilityFeatureByReviewIdAndFeatureParams) error {
	_, err := q.db.ExecContext(ctx, updateAccessibilityFeatureByReviewIdAndFeature, arg.Feature, arg.ReviewID, arg.Feature_2)
	return err
}
