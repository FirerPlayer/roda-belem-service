// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: favorites.sql

package db

import (
	"context"
	"database/sql"
)

const createFavorite = `-- name: CreateFavorite :exec
INSERT INTO favorites (user_id, place_id)
VALUES (?, ?)
`

type CreateFavoriteParams struct {
	UserID  sql.NullString
	PlaceID sql.NullString
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, createFavorite, arg.UserID, arg.PlaceID)
	return err
}

const deleteFavoriteByUserIdAndPlaceId = `-- name: DeleteFavoriteByUserIdAndPlaceId :exec
DELETE FROM favorites
WHERE user_id = ?
  AND place_id = ?
`

type DeleteFavoriteByUserIdAndPlaceIdParams struct {
	UserID  sql.NullString
	PlaceID sql.NullString
}

func (q *Queries) DeleteFavoriteByUserIdAndPlaceId(ctx context.Context, arg DeleteFavoriteByUserIdAndPlaceIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavoriteByUserIdAndPlaceId, arg.UserID, arg.PlaceID)
	return err
}

const findFavoritesByUserId = `-- name: FindFavoritesByUserId :many
SELECT place_id
FROM favorites
WHERE user_id = ?
`

func (q *Queries) FindFavoritesByUserId(ctx context.Context, userID sql.NullString) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, findFavoritesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var place_id sql.NullString
		if err := rows.Scan(&place_id); err != nil {
			return nil, err
		}
		items = append(items, place_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
